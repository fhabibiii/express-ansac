generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum untuk role user
enum Role {
  ADMIN
  SUPERADMIN
  USER_SELF
  USER_PARENT
}

// Enum untuk status test
enum TestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique @db.VarChar(255)
  name        String    @db.VarChar(255)
  email       String    @unique @db.VarChar(255)
  password    String    @db.VarChar(255)
  phoneNumber String    @unique @db.VarChar(15)
  dateOfBirth DateTime
  role        Role
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  testResults TestResult[]
}

model Test {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  shortDesc   String    @db.Text
  longDesc    String    @db.Text
  minAge      Int
  maxAge      Int
  target      String    @db.VarChar(20)    
  status      TestStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  subskala    Subskala[]
  testResults TestResult[]
  questionOrders QuestionOrder[]
}

// Model Subskala
model Subskala {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(255)
  testId        Int
  test          Test       @relation(fields: [testId], references: [id])
  label1        String     @db.VarChar(255) @default("Normal")
  description1  String     @db.Text
  minValue1     Int
  maxValue1     Int
  label2        String     @db.VarChar(255) @default("Borderline")
  description2  String     @db.Text
  minValue2     Int
  maxValue2     Int
  label3        String     @db.VarChar(255) @default("Abnormal")
  description3  String     @db.Text
  minValue3     Int
  maxValue3     Int
  questions     Question[]
  testResultSubskala TestResultSubskala[]
}

// Model Question
model Question {
  id            Int        @id @default(autoincrement())
  text          String     @db.Text
  subskalaId    Int
  subskala      Subskala   @relation(fields: [subskalaId], references: [id])
  option1Label  String     @db.VarChar(255) @default("Tidak Benar")
  option1Value  Int        
  option2Label  String     @db.VarChar(255) @default("Agak Benar")
  option2Value  Int        
  option3Label  String     @db.VarChar(255) @default("Benar")
  option3Value  Int        
  questionOrders QuestionOrder[]
}

model TestResult {
  id           Int       @id @default(autoincrement())
  userId       Int
  testId       Int
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id])
  test         Test      @relation(fields: [testId], references: [id])
  subskalaResults TestResultSubskala[]
}

model TestResultSubskala {
  id            Int      @id @default(autoincrement())
  testResultId  Int
  subskalaId    Int
  score         Int
  testResult    TestResult @relation(fields: [testResultId], references: [id])
  subskala      Subskala   @relation(fields: [subskalaId], references: [id])
}

// Model QuestionOrder
model QuestionOrder {
  id          Int      @id @default(autoincrement())
  testId      Int
  questionId  Int
  order       Int
  test        Test     @relation(fields: [testId], references: [id])
  question    Question @relation(fields: [questionId], references: [id])
}