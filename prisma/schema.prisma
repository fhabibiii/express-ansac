generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum untuk role user
enum Role {
  ADMIN
  SUPERADMIN
  USER_SELF
  USER_PARENT
}

// Enum untuk status test
enum TestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique @db.VarChar(255)
  name        String    @db.VarChar(255)
  email       String    @unique @db.VarChar(255)
  password    String    @db.VarChar(255)
  phoneNumber String    @unique @db.VarChar(15)
  dateOfBirth DateTime
  role        Role
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  testResults TestResult[]
}

model Test {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  shortDesc   String    @db.Text
  longDesc    String    @db.Text
  minAge      Int
  maxAge      Int
  isForParent Boolean    
  status      TestStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[]
  testResults TestResult[]
}

// Model Category
model Category {
  id            Int                   @id @default(autoincrement())
  name          String                @db.VarChar(255)
  testId        Int
  test          Test                   @relation(fields: [testId], references: [id])
  questions     Question[]
  ranges        CategoryRange[]
  maxQuestions  Int                    @default(5)
  testScores    TestCategoryScore[]    // Relasi balik ke TestCategoryScore
}

// Model CategoryRange
model CategoryRange {
  id          Int        @id @default(autoincrement())
  categoryId  Int
  minValue    Int
  maxValue    Int
  label       String     @db.VarChar(255)
  desc        String     @db.Text
  category    Category   @relation(fields: [categoryId], references: [id])
}

// Model Question
model Question {
  id            Int        @id @default(autoincrement())
  text          String     @db.Text
  categoryId    Int
  category      Category   @relation(fields: [categoryId], references: [id])
  options       QuestionOption[]
  isForward     Boolean    // Nilai maju atau mundur
}

// Model QuestionOption
model QuestionOption {
  id          Int     @id @default(autoincrement())
  questionId  Int
  value       Int     // Nilai opsi (0, 1, 2)
  label       String  // Label opsi (Tidak Benar, Agak Benar, Benar)
  question    Question @relation(fields: [questionId], references: [id])
}

// Model TestResult
model TestResult {
  id              Int       @id @default(autoincrement())
  userId          Int
  testId          Int
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id])
  test            Test      @relation(fields: [testId], references: [id])
  scores          TestCategoryScore[]
}

// Model TestCategoryScore untuk menyimpan skor per kategori
model TestCategoryScore {
  id           Int        @id @default(autoincrement())
  testResultId Int
  categoryId   Int
  score        Int
  category     Category   @relation(fields: [categoryId], references: [id])
  testResult   TestResult @relation(fields: [testResultId], references: [id])
}